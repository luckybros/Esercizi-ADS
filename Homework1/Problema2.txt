// Esercizio 2: Luca Antonio Scolletta
// In questo esercizio una versione semplificata del Merge Sort
// divide le stringhe e le confronta. Anche in questa situazione
// la complessità è O(nlogn): il tempo per attraversare le stinghe
// e valutare i caratteri che potrebbero essere uguali è lineare

#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Solution {
    public:
    string findCommonPrefix(const vector<string>& strings, int start, int end) {
        if (start == end) 
        return strings[start];
    
        int middle = (start + end) / 2;

        string leftPrefix = findCommonPrefix(strings, start, middle);
        string rightPrefix = findCommonPrefix(strings, middle + 1, end);

        return findCommonPrefixHelper(leftPrefix, rightPrefix);
    }

    string findCommonPrefixHelper(const string& str1, const string& str2) {
        int minLength = min(str1.length(), str2.length());
        int i = 0;

        while (i < minLength && str1[i] == str2[i]) 
            i++;
    
        return str1.substr(0, i);
    }
};

int main() {
    Solution soluzione;

    vector<string> test1;
    test1.push_back("apple");
    test1.push_back("april");
    test1.push_back("ape");
    test1.push_back("applied");
    cout << soluzione.findCommonPrefix(test1, 0, test1.size()-1) << endl;

    vector<string> test2;
    test2.push_back("book");
    test2.push_back("boot");
    test2.push_back("boost");
    test2.push_back("boon");
    cout << soluzione.findCommonPrefix(test2, 0, test2.size() - 1) << endl;

    vector<string> test3;
    test3.push_back("car");
    test3.push_back("card");
    test3.push_back("cart");
    test3.push_back("carp");
    cout << soluzione.findCommonPrefix(test3, 0, test3.size() - 1) << endl;

    vector<string> test4;
    test4.push_back("abcde");
    test4.push_back("abc");
    test4.push_back("abcdef");
    test4.push_back("abcd");
    cout << soluzione.findCommonPrefix(test4, 0, test4.size() - 1) << endl;
}