#include <iostream>
using namespace std;
#define COUNT 10

class Node {
    private:
    char key;
    int priority;
    Node* right;
    Node* left;

    public:
    Node() {
        key = 0;
        priority = 0;
        right = NULL;
        left = NULL;
    }
    Node(char key, int priority) {
        this->key = key;
        this->priority = priority;
        left = NULL;
        right = NULL;
    }
    char getKey() {return key;}
    int getPriority() {return priority;}
    Node* getRightChild() {return right;}
    Node* getLeftChild() {return left;}
    void setKey(char key) {this->key = key;}
    void setPriority(int priority) {this->priority = priority;}
    void setRightChild(Node* right) {this->right = right;}
    void setLeftChild(Node* left) {this->left = left;}
};

class Solution {
    public:
    Node* RightRotation(Node* currentNode){
        Node* leftChild = currentNode->getLeftChild();
        Node* rightOfLeftChild = leftChild->getRightChild();

        leftChild->setRightChild(currentNode);
        currentNode->setLeftChild(rightOfLeftChild);

        return leftChild;
    }

    Node* LeftRotation(Node* currentNode){
        Node* rightChild = currentNode->getRightChild();
        Node* leftOfRightChild = rightChild->getLeftChild();

        rightChild->setLeftChild(currentNode);
        currentNode->setRightChild(leftOfRightChild);

            return rightChild;
    }
    
    Node* Insert(Node* root, Node* added) {
        if(root == NULL) 
            return added;

        if(added->getKey() < root->getKey()) {
            root->setLeftChild(Insert(root->getLeftChild(), added));
            if(root->getLeftChild()->getPriority() < root->getPriority())
                root = RightRotation(root); 
        }
        
        if(added->getKey() > root->getKey()) {
            root->setRightChild(Insert(root->getRightChild(), added));
            if(root->getRightChild()->getPriority() < root->getPriority())
                root = LeftRotation(root);
        }

        return root;
    }
    
    void PrintTree(Node* root) {
        PrintTreeUtil(root, 0);
    }

    void PrintTreeUtil(Node* root, int space) {
        if (root == NULL)
        return;
 
        space += COUNT;
 
        PrintTreeUtil(root->getRightChild(), space);

        cout << endl;
        for (int i = COUNT; i < space; i++)
            cout << " ";
        cout << root->getKey() << "\n";
 
        PrintTreeUtil(root->getLeftChild(), space);
    };
};

int main() {
    Solution solution;

    Node* root = new Node('G', 4);

    Node* A = new Node('B', 7);
    Node* B = new Node('H', 5);
    root = solution.Insert(root, A);
    root = solution.Insert(root, B);

    Node* C = new Node('A', 10);
    Node* D = new Node('E', 23);
    root = solution.Insert(root, C);
    root = solution.Insert(root, D);

    Node* E = new Node('K', 65);
    root = solution.Insert(root, E);

    Node* F = new Node('I', 73);
    root = solution.Insert(root, F);

    Node* G = new Node('C', 25);
    root = solution.Insert(root, G);

    Node* H = new Node('D', 9);
    root = solution.Insert(root, H);

    Node* I = new Node('F', 2);
    root = solution.Insert(root, I);

    solution.PrintTree(root);

    // Deallocazione della memoria
    delete I;
    delete H;
    delete G;
    delete F;
    delete E;
    delete D;
    delete C;
    delete B;
    delete A;
    delete root;

    return 0;
}

